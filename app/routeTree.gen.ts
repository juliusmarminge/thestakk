/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlaceholderImport } from './routes/placeholder'
import { Route as AppImport } from './routes/_app'
import { Route as AppIndexImport } from './routes/_app.index'
import { Route as AppSettingsImport } from './routes/_app.settings'

// Create/Update Routes

const PlaceholderRoute = PlaceholderImport.update({
  id: '/placeholder',
  path: '/placeholder',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AppSettingsRoute = AppSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/placeholder': {
      id: '/placeholder'
      path: '/placeholder'
      fullPath: '/placeholder'
      preLoaderRoute: typeof PlaceholderImport
      parentRoute: typeof rootRoute
    }
    '/_app/settings': {
      id: '/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsImport
      parentRoute: typeof AppImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppSettingsRoute: typeof AppSettingsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AppRouteWithChildren
  '/placeholder': typeof PlaceholderRoute
  '/settings': typeof AppSettingsRoute
  '/': typeof AppIndexRoute
}

export interface FileRoutesByTo {
  '/placeholder': typeof PlaceholderRoute
  '/settings': typeof AppSettingsRoute
  '/': typeof AppIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/placeholder': typeof PlaceholderRoute
  '/_app/settings': typeof AppSettingsRoute
  '/_app/': typeof AppIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/placeholder' | '/settings' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/placeholder' | '/settings' | '/'
  id: '__root__' | '/_app' | '/placeholder' | '/_app/settings' | '/_app/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  PlaceholderRoute: typeof PlaceholderRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  PlaceholderRoute: PlaceholderRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/placeholder"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/settings",
        "/_app/"
      ]
    },
    "/placeholder": {
      "filePath": "placeholder.tsx"
    },
    "/_app/settings": {
      "filePath": "_app.settings.tsx",
      "parent": "/_app"
    },
    "/_app/": {
      "filePath": "_app.index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
